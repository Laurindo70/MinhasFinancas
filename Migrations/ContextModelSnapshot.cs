// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MinhasFinancas.Domain;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MinhasFinancas.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MinhasFinancas.Domain.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Amount_received_per_month")
                        .HasColumnType("double precision");

                    b.Property<double>("Available_value")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasDefaultValue(0.0);

                    b.Property<DateTime?>("Created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("Responsible_user")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Updated_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("User_created")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("User_updated")
                        .HasColumnType("uuid");

                    b.Property<double>("Value_credit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasDefaultValue(0.0);

                    b.HasKey("Id");

                    b.HasIndex("Responsible_user");

                    b.HasIndex("User_created");

                    b.HasIndex("User_updated");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("MinhasFinancas.Domain.TabelsOfRelation.UserAsAccount", b =>
                {
                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("Account_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("User_id");

                    b.HasIndex("AccountId");

                    b.HasIndex("UserId");

                    b.ToTable("User_has_account");
                });

            modelBuilder.Entity("MinhasFinancas.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool?>("Account_activated")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("Activated_by_email")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("Created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("Updated_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("User_created")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("User_updated")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("User_created");

                    b.HasIndex("User_updated");

                    b.ToTable("User");
                });

            modelBuilder.Entity("MinhasFinancas.Domain.Account", b =>
                {
                    b.HasOne("MinhasFinancas.Domain.User", "ResponsibleUser")
                        .WithMany()
                        .HasForeignKey("Responsible_user")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MinhasFinancas.Domain.User", "UserCreated")
                        .WithMany()
                        .HasForeignKey("User_created")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MinhasFinancas.Domain.User", "UserUpdated")
                        .WithMany()
                        .HasForeignKey("User_updated");

                    b.Navigation("ResponsibleUser");

                    b.Navigation("UserCreated");

                    b.Navigation("UserUpdated");
                });

            modelBuilder.Entity("MinhasFinancas.Domain.TabelsOfRelation.UserAsAccount", b =>
                {
                    b.HasOne("MinhasFinancas.Domain.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MinhasFinancas.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MinhasFinancas.Domain.User", b =>
                {
                    b.HasOne("MinhasFinancas.Domain.User", "UserCreated")
                        .WithMany()
                        .HasForeignKey("User_created")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MinhasFinancas.Domain.User", "UserUpdated")
                        .WithMany()
                        .HasForeignKey("User_updated");

                    b.Navigation("UserCreated");

                    b.Navigation("UserUpdated");
                });
#pragma warning restore 612, 618
        }
    }
}
